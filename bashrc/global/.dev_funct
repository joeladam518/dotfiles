# Development functions

## Git functions
git_pretty_log() 
{
    git log --pretty=format:'%Cred%h%Creset - %Cblue%an%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' $* |
    # Replace (2 years ago) with (2 years)
    sed -Ee 's/(^[^<]*) ago\)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
    # Line columns up based on } delimiter
    # Page only if we need to
    less -FXRS
}
git_show_head() 
{
    git_pretty_log -1
    git show -p --pretty="tformat:"
}
git_removeAllUnmergedLocalBranchesNotOnRemoteFunction()
{
    echo "Didn't do anything. TODO: finish this function :-)"
    exit 0
    
    # TODO: make sure it is only deleting the branches you don't need. Maybe make it interactive? Check to make sure the user wants 
    #       to delete the selected branches. Allow them to edit the to delete branch list and the execute.  
    git fetch -p && git branch -vv | awk '{print $1, $4}' | grep 'gone]' | awk '{if ($1!="evolve-changes") print $1}' | xargs git branch -d
}

## Link a local composer-package repo to another project for testing
composerLink() 
{
    composer config repositories.local '{"type": "path", "url": "'$1'"}' --file composer.json
}

#
# Greenbar git functions
#

greenbar_newBranchFunction()
{
    git checkout develop && git pull upstream develop && git push && git checkout -b $1
}
greenbar_prepBranchFunction()
{
    local branch_name

    if [ -n "$(git status --porcelain)" ]; then
        echo "You must commit your changes first.";
    else
        branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
        branch_name="(unnamed branch)" # detached HEAD
        branch_name=${branch_name##refs/heads/}

        git checkout develop && git pull upstream develop && git push && git checkout $branch_name && git merge develop
    fi
}
greenbar_pushBranchFunction()
{
    local branch_name

    if [ -n "$(git status --porcelain)" ]; then
        echo "You must commit your changes first.";
    else
        branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
        branch_name="(unnamed branch)"     # detached HEAD
        branch_name=${branch_name##refs/heads/}

        git checkout develop && git merge $branch_name && git push
    fi
}
