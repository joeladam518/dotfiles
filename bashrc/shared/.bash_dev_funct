# -*- shell-script -*-
# Development functions

# cd into a repo based on a ".repo-aliases" file you define in your home directory
repo()
{
    local repos line key aliased aliases_path
    aliases_path="${HOME}/.repo-aliases"

    # convert file to bash array
    if [ -f "$aliases_path" ] && [ -r "$aliases_path" ]; then
        eval "$(__repo-helper "${aliases_path}" --name=repos)"
    else
        declare -A repos
    fi

    # add repo directories that we didn't define in out aliases file to our array
    aliased="$(printf '%s\n' "${repos[@]}")"
    for line in "${HOME}/repos/"*; do
        if ! (echo "$aliased" | grep -xq "$line"); then
            repos["$(basename "$line")"]="$line"
        fi
    done

    key="${1}"
    if [ -z "${key}" ]; then
        echo "You must specify a key" 1>&2
        return 1
    fi

    # Check if key exists in the array
    if ! [ ${repos[$key]+bob} ]; then
        echo "invalid option ${1}" 1>&2
        return 1
    fi

    cd "${repos[$key]}" || return 1

    return 0
}

st-release() {
    if [ -z "${1}" ]; then
        echo "You need to provide a tag" 1>&2
        return 1
    fi
    
    branches="${2:-"origin/staging..origin/master"}"
    git log "${branches}" --oneline --no-merges | grep -Eio "${1}-([0-9]+)" | tr a-z A-Z | sort | uniq

    return $?
}

#
# Git functions
#

__git_delete_dead_local_branches_not_on_remote()
{
    # Attempt to delete any dead local branches
    #
    # This seemed to work on 2019-02-28 and again on 2020-09-15
    # notes: https://stackoverflow.com/questions/13064613/how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore
    #
    # Whats left TODO:
    # - Function fails on any repos not "fully merged". So need to list any branches that fail to be deleted.

    echo "TODO: finish this function :-)"
    return 0

    git fetch -p && git branch -r | awk '{print $1}' | grep -E -v -f /dev/fd/0 <( git branch -vv | grep origin ) | awk '{print $1}' | xargs git branch -d
    return "$?"
}
