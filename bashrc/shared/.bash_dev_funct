# Development functions

# Link a local composer-package repo to another project for testing
composer_link() 
{
    composer config repositories.local '{"type": "path", "url": "'$1'"}' --file composer.json
}
# Automatically try to delete dead baranches on local
git_removeAllUnmergedLocalBranchesNotOnRemoteFunction()
{
    echo "Didn't do anything. TODO: finish this function :-)"
    exit 0
    
    # TODO: make sure it is only deleting the branches you don't need. Maybe make it interactive? 
    # Check to make sure the user wants to delete the selected branches. Allow them to edit the to 
    # delete branch list and the execute.     
    
    # First thought
    git fetch -p && git branch -vv | awk '{print $1, $4}' | grep 'gone]' | awk '{if ($1!="evolve-changes") print $1}' | xargs git branch -d

    # Second thought (Seemed to work on 2019-02-28)  https://stackoverflow.com/questions/13064613/how-to-prune-local-tracking-branches-that-do-not-exist-on-remote-anymore
    git branch -r | awk '{print $1}' | egrep -v -f /dev/fd/0 <(git branch -vv | grep origin) | awk '{print $1}' | xargs git branch -d
}

#
# Docker functions
#

# Bring up SIDTK -> https://github.com/sourcetoad/DevopsToolKit
docker_connectToSidtkFunction()
{
    cwd=$(pwd)
    sdtk_dir="${HOME}/devop-tools/docker/data-source-services"
    st_dtools_dir="${HOME}/devop-tools/docker/data-source-tools"
    if [ ! -d "$sdtk_dir" ]; then
        echo "data source services not found... What are you trying to connect to?"
        return 1
    fi
    
    if [ ! -d "$st_dtools_dir" ]; then
        echo "data source tools not found... "
        return 1
    fi

    # trap "cd ${cwd}" RETURN
    cd "$sdtk_dir" && docker-compose up --build -d && cd "$st_dtools_dir" && docker-compose up --build -d && cd "$cwd"
}
# Bring up docker container inside repo
docker_upFunction()
{
    cwd=$(pwd)
    if [ ! -d "./docker" ]; then
        echo "No docker folder. Are you sure you're in the right place?"
        return 1
    fi

    trap "cd ${cwd}" RETURN
    cd "./docker" && docker-compose up --build # -d makes it a backgroud process
}
# Stop docker container inside repo
docker_stopFunction()
{
    cwd=$(pwd)
    if [ ! -d "./docker" ]; then
        echo "No docker folder. Are you sure you're in the right place?"
        return 1
    fi

    cd "./docker" && docker-compose stop && cd "$cwd"
}
# Stop all docker containers
docker_stopAllContainersFunction()
{
    docker stop `docker ps -q`
}

#
# Greenbar git functions
# 

greenbar_newBranchFunction()
{
    git checkout develop && git pull upstream develop && git push && git checkout -b $1
}
greenbar_prepBranchFunction()
{
    local branch_name

    if [ -n "$(git status --porcelain)" ]; then
        echo "You must commit your changes first.";
    else
        branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
        branch_name="(unnamed branch)" # detached HEAD
        branch_name=${branch_name##refs/heads/}

        git checkout develop && git pull upstream develop && git push && git checkout $branch_name && git merge develop
    fi
}
greenbar_pushBranchFunction()
{
    local branch_name

    if [ -n "$(git status --porcelain)" ]; then
        echo "You must commit your changes first.";
    else
        branch_name="$(git symbolic-ref HEAD 2>/dev/null)" ||
        branch_name="(unnamed branch)"     # detached HEAD
        branch_name=${branch_name##refs/heads/}

        git checkout develop && git merge $branch_name && git push
    fi
}
