#!/usr/bin/env python3
# Parse your repo aliases file for a list of keys (aliases), a list of paths,
# or a bash multidimensional array
import argparse
import os
from configparser import ConfigParser


# Functions
def print_bash_array(parser: ConfigParser) -> None:
    for section in parser.sections():
        print(f'declare -A {section}')
        for key, val in parser.items(section):
            print(f'{section}[{key}]="{os.path.expanduser(val)}"')


def print_keys(parser: ConfigParser, section: str, sep: str = ' ') -> None:
    keys = dict(parser.items(section)).keys()
    print(*keys, sep=sep)


def print_paths(parser: ConfigParser, section: str, sep: str = ' ') -> None:
    paths = map(lambda x: os.path.expanduser(x), dict(parser.items(section)).values())
    print(*paths, sep=sep)


def parse_separator(seperator: str) -> str:
    if seperator == ' ':
        return ' '

    if seperator == r'\n':
        return os.linesep

    if seperator == r'\t':
        return '\t'

    return seperator


def parse_script_args():
    parser = argparse.ArgumentParser(description='Parse your repo aliases into keys, values, or a bash array.')

    parser.add_argument('file', type=str, action='store', help="repo aliases file path")
    parser.add_argument('-n', '--name', type=str, action='store', default='repos', help="set the variable name for your bash array")
    parser.add_argument('-s', '--sep', type=str, action='store', default=' ', help="set the seperator for keys and paths")
    parser.add_argument('-k', '--keys', action='store_true', default=False, help="get repo aliases's keys")
    parser.add_argument('-p', '--paths', action='store_true', default=False, help="get repo aliases's paths")

    return parser.parse_args()

if __name__ == '__main__':
    args = parse_script_args()
    config_parser = ConfigParser()

    with open(args.file, 'r') as file:
        config_parser.read_string(f'[{args.name}]\n' + file.read())

    if args.keys:
        print_keys(config_parser, section=args.name, sep=parse_separator(args.sep))
    elif args.paths:
        print_paths(config_parser, section=args.name, sep=parse_separator(args.sep))
    else:
        print_bash_array(config_parser)
