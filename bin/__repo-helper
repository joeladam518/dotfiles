#!/usr/bin/env python3
import os
import sys
from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from getpass import getuser
from typing import Optional

# Constants
FAILURE=1
SUCCESS=0
SECTION_NAME='repos'


# Functions
def get_repo_aliases(script_args: Namespace) -> dict:
    repos_directory = os.path.expanduser(script_args.dir)

    if not os.path.exists(repos_directory):
        raise Exception(f"'{repos_directory}' doesn't exist.")
    
    aliases_config = {}
    try:
        with open(script_args.file, 'r') as file:
            config_parser = ConfigParser()
            config_parser.read_string(f'[{SECTION_NAME}]\n' + file.read())
            aliases_config = config_parser.items(SECTION_NAME)
    except FileNotFoundError:
        pass
    
    aliases = {key: os.path.expanduser(path) for (key, path) in aliases_config}
    aliases_keys = list(aliases.keys())
    aliases_paths = list(aliases.values())

    def get_aliases_key(val) -> Optional[str]:
        try:
            pos = aliases_paths.index(val)
        except ValueError:
            return None

        return aliases_keys[pos]

    for f in os.scandir(repos_directory):
        if not f.is_dir():
            continue

        path = os.path.abspath(f.path)
        key = get_aliases_key(path)

        if key is None:
            aliases[f.name] = path

    return aliases


def parse_script_args():
    arg_parser = ArgumentParser(description='Parse your repo aliases')

    arg_parser.add_argument('file', type=str, action='store',
                            help="repo aliases file path")
    arg_parser.add_argument('--dir', type=str, action='store', default=os.path.expanduser(f"~{getuser()}/repos"),
                            help="set the directory where your repos are located")
    arg_parser.add_argument('--key', type=str, action='store', default=None,
                            help="get path by key")
    arg_parser.add_argument('--list-keys', action='store_true', default=False,
                            help="list keys")
    arg_parser.add_argument('--list-paths', action='store_true', default=False,
                            help="list paths")
    arg_parser.add_argument('--sep', type=str, action='store', default="\n",
                            help="set the separator for listing keys and paths")

    return arg_parser.parse_args()


if __name__ == '__main__':
    args = parse_script_args()
    repo_aliases = get_repo_aliases(args)

    if args.key:
        path = repo_aliases.get(args.key)
        if path:
            print(path)
        else:
            sys.exit(FAILURE)
    elif args.list_keys:
        print(*repo_aliases.keys(), sep=args.sep.encode().decode('unicode-escape'))
    elif args.list_paths:
        print(*repo_aliases.values(), sep=args.sep.encode().decode('unicode-escape'))
    else:
        # print the list of aliases for viewing (debug)
        length = max(len(x) for x in repo_aliases.values())
        for key in sorted(repo_aliases):
            print(f'{repo_aliases[key]:{length}} = {key}')

    sys.exit(SUCCESS)
