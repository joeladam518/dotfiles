#!/usr/bin/env python3
import argparse
import csv
import platform
import sys

SUCCESS = 0
FAILURE = 1


def get_linux_distro() -> str:
    return get_linux_release_info().get('ID', '')


def get_linux_like_distro() -> str:
    return get_linux_release_info().get('ID_LIKE', '')


def get_linux_release_info() -> dict:
    release_data = {}

    with open("/etc/os-release") as f:
        reader = csv.reader(f, delimiter="=")
        for row in reader:
            if row:
                release_data[row[0]] = row[1]

    return release_data


def get_os_distro() -> str:
    os_type = get_os_type()

    if os_type == 'linux':
        return get_linux_distro()

    return os_type


def get_os_like_distro() -> str:
    os_type = get_os_type()

    if os_type == 'linux':
        return get_linux_like_distro()

    return os_type


def get_os_type() -> str:
    if sys.platform in ['win32', 'win64', 'cygwin']:
        return 'windows'

    if sys.platform == 'darwin':
        return 'mac'

    if sys.platform == 'linux':
        return 'linux'

    system = platform.system().lower()

    if system == 'darwin':
        return 'mac'

    return system


def parse_script_args():
    parser = argparse.ArgumentParser(description='Determine the operating system.')
    parser.add_argument('-s', '--simplified', action='store_true', default=False,
                        help='get the simplified os type. windows|mac|linux')
    parser.add_argument('-l', '--like', action='store_true', default=False,
                        help='get the distro that the current distro is like. (for Linux)')

    return parser.parse_args()


if __name__ == '__main__':
    if sys.version_info < (3, 7):
        print('python 3.7 and above is required')
        sys.exit(FAILURE)

    args = parse_script_args()

    if args.simplified:
        print(get_os_type())
    elif args.like:
        print(get_os_like_distro())
    else:
        print(get_os_distro())

    sys.exit(SUCCESS)
