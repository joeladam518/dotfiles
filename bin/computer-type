#!/usr/bin/env python3
import argparse
import csv
import platform
import sys
from os import path


SUCCESS = 0
FAILURE = 1


def get_distro() -> str:
    return get_os_release_value('ID')


def get_distro_like() -> str:
    return get_os_release_value('ID_LIKE')


def get_os_distro() -> str:
    os_type = get_platform()

    if os_type == 'linux':
        return get_distro()

    return os_type


def get_os_distro_like() -> str:
    os_type = get_platform()

    if os_type == 'linux':
        return get_distro_like()

    return os_type


def get_os_release() -> dict:
    if not path.exists('/etc/os-release'):
        return {}

    with open('/etc/os-release') as f:
        reader = csv.reader(f, delimiter="=")
        data = {key: value for key, value in reader}

    return data


def get_os_release_value(key: str) -> str:
    return get_os_release().get(key, '')


def get_platform() -> str:
    if sys.platform in ['win32', 'win64', 'cygwin']:
        return 'windows'

    if sys.platform == 'darwin':
        return 'mac'

    if sys.platform == 'linux':
        return 'linux'

    system = platform.system().lower()

    if system == 'darwin':
        return 'mac'

    return system


def parse_script_args():
    parser = argparse.ArgumentParser(description='Determine the operating system.')
    parser.add_argument('-s', '--simplified', action='store_true', default=False,
                        help='get the simplified os type. windows|mac|linux')
    parser.add_argument('-l', '--like', action='store_true', default=False,
                        help='get the distro that the current distro is like. (for Linux)')

    return parser.parse_args()


if __name__ == '__main__':
    if sys.version_info < (3, 7):
        print('python 3.7 and above is required')
        sys.exit(FAILURE)

    args = parse_script_args()

    if args.simplified:
        print(get_platform())
    elif args.like:
        print(get_os_distro_like())
    else:
        print(get_os_distro())

    sys.exit(SUCCESS)
