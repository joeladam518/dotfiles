#!/usr/bin/env python3
import os
import sys
from argparse import ArgumentParser

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'python')))
from dotfiles import arr, console, osinfo, php, run, Version


# Functions
def install_php_sources() -> None:
    if osinfo.id() in ['debian', 'raspbian']:
        packages = ['apt-transport-https', 'ca-certificates', 'software-properties-common', 'lsb-release', 'gnupg2']
        run.command('apt install -y', *packages, root=True)
        run.command('wget -O /etc/apt/trusted.gpg.d/php.gpg https://packages.sury.org/php/apt.gpg', root=True)
        source = 'deb https://packages.sury.org/php/ $(lsb_release -sc) main'
        source_file_path = '/etc/apt/sources.list.d/sury-php.list'
        run.command(f'echo "{source}" | sudo tee "{source_file_path}"')
    elif osinfo.id() == 'ubuntu':
        packages = ['software-properties-common', 'lsb-release']
        run.command('apt install -y', *packages, root=True)
        run.command('add-apt-repository ppa:ondrej/php -y', root=True)
    else:
        raise Exception('Unsupported OS')


def parse_script_args():
    """Parse script args"""
    parser = ArgumentParser(description='Install PHP')

    parser.add_argument('-e', '--env', type=str, action='store', choices=('desktop', 'server'), default='desktop',
                        help='type of environment php will be installed on')
    parser.add_argument('-v', '--version', type=str, action='store', default=None,
                        help='php version to install')

    return parser.parse_args()


def php_sources_installed() -> bool:
    """Check see if the php apt repository is installed"""
    cmd = "find /etc/apt/ -name *.list | xargs cat | grep ^[[:space:]]*deb | grep '%s' | grep 'php'"
    if osinfo.id() in ['debian', 'raspbian']:
        if os.path.exists('/etc/apt/sources.list.d/sury-php.list'):
            return True
        proc = run.command(cmd % 'sury', check=False, supress_output=True)
        return proc.returncode == 0
    elif osinfo.id() == 'ubuntu':
        if os.path.exists(f"/etc/apt/sources.list.d/ondrej-ubuntu-php-{osinfo.codename()}.list"):
            return True
        proc = run.command(cmd % 'ondrej', check=False, supress_output=True)
        return proc.returncode == 0
    else:
        return False


if __name__ == '__main__':
    if osinfo.id() not in ['debian', 'raspbian', 'ubuntu']:
        print('Your operating system is not supported', file=sys.stderr)
        sys.exit(console.FAILURE)

    args = parse_script_args()

    installable_versions = [v for v in php.versions if Version(v).gt('8.0')]
    if not args.version or args.version not in installable_versions:
        args.version = console.choice(
            "Which version would you like to install?",
            installable_versions,
            default=php.current_version
        )
        if not args.version:
            print('Invalid php version', file=sys.stderr)
            sys.exit(console.FAILURE)

    if not args.env or args.env not in php.extensions:
        args.env = console.choice(
            "What kind of environment is this for?",
            ('desktop', 'server'),
            default='desktop'
        )
        if not args.env:
            print('Environment not supported', file=sys.stderr)
            sys.exit(console.FAILURE)

    # combine the packages to be installed
    extensions = [*php.extensions['default'], *php.extensions.get(args.env, ())]

    if Version(args.version).lt('8.0'):
        extensions.append('json')

    # filter out any extensions we don't want
    extensions = arr.unique(extensions)

    # build the extension strings and add them to the packages list
    packages = [f"php{args.version}", *list(map(lambda ext: f"php{args.version}-{ext}", extensions))]

    print("")
    print("Packages to be installed:")
    print(*packages, sep='\n')

    print("")
    if console.confirm('Proceed?'):
        if not php_sources_installed():
            install_php_sources()

        run.command('apt update', root=True)
        run.command('apt install -y', *packages, root=True)
    else:
        print("Exiting...")

    print("")
    sys.exit(console.SUCCESS)
